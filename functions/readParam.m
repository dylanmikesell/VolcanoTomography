%--------------------------------------------------------------------------
% Find parameter value
%--------------------------------------------------------------------------
function outParam = readParam( paramName )
%
% USAGE: function outParam = readParam( paramName )
%
% INPUT:
%   paramName = string value of parameter name
% OUTPUT:
%    outParam = parameter value/string from the params.txt file
%
% Written by: Dylan Mikesell (mikesell@mit.edu)
% Last modified: 8 March 2015

[ allParams, allValues ] = importfile( 'params.txt' );

% process inputs
allParams = strtrim( allParams ); % trim white space
allValues = strtrim( allValues ); % trim white space
for ii = 1 : numel(allValues) % remove comments
    thisValue     = allValues{ii};
    commentIdx    = strfind( thisValue, '#' );
    if ~isempty(commentIdx)
        allValues{ii} = strtrim( thisValue( 1 : commentIdx - 1 ) );
    end
end

% find parameter value
rightRow = strcmp( allParams, paramName );
outParam = allValues{ rightRow };

return
%--------------------------------------------------------------------------
% Import text parameter file
%--------------------------------------------------------------------------
function [ param, value ] = importfile( filename, startRow, endRow )
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [PARAM,VALUE] = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   [PARAM,VALUE] = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [param,value] = importfile('params.txt',1, 3);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/03/08 13:31:26

% Initialize variables.
delimiter = '=';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%[^\n\r]';

if exist(filename,'file')
    % Open the text file.
    fileID = fopen(filename,'r');
    
    % Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    % Close the text file.
    fclose(fileID);
    
    % Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.
    
    % Allocate imported array to column variable names
    param = dataArray{:, 1};
    value = dataArray{:, 2};
else
    error('MATLAB:readParam:CannotLoadParameterFile',...
        'params.txt does not exist in current directory.');
end

return